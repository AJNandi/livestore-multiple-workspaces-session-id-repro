/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LivestoreImport } from './routes/_livestore'
import { Route as IndexImport } from './routes/index'
import { Route as LivestoreFilesIndexImport } from './routes/_livestore.files.index'

// Create/Update Routes

const LivestoreRoute = LivestoreImport.update({
  id: '/_livestore',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LivestoreFilesIndexRoute = LivestoreFilesIndexImport.update({
  id: '/files/',
  path: '/files/',
  getParentRoute: () => LivestoreRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_livestore': {
      id: '/_livestore'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LivestoreImport
      parentRoute: typeof rootRoute
    }
    '/_livestore/files/': {
      id: '/_livestore/files/'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof LivestoreFilesIndexImport
      parentRoute: typeof LivestoreImport
    }
  }
}

// Create and export the route tree

interface LivestoreRouteChildren {
  LivestoreFilesIndexRoute: typeof LivestoreFilesIndexRoute
}

const LivestoreRouteChildren: LivestoreRouteChildren = {
  LivestoreFilesIndexRoute: LivestoreFilesIndexRoute,
}

const LivestoreRouteWithChildren = LivestoreRoute._addFileChildren(
  LivestoreRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LivestoreRouteWithChildren
  '/files': typeof LivestoreFilesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LivestoreRouteWithChildren
  '/files': typeof LivestoreFilesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_livestore': typeof LivestoreRouteWithChildren
  '/_livestore/files/': typeof LivestoreFilesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/files'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/files'
  id: '__root__' | '/' | '/_livestore' | '/_livestore/files/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LivestoreRoute: typeof LivestoreRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LivestoreRoute: LivestoreRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_livestore"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_livestore": {
      "filePath": "_livestore.tsx",
      "children": [
        "/_livestore/files/"
      ]
    },
    "/_livestore/files/": {
      "filePath": "_livestore.files.index.tsx",
      "parent": "/_livestore"
    }
  }
}
ROUTE_MANIFEST_END */
